{"version":3,"sources":["Card.js","Tree.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","title","textAlign","fontSize","username","fontWeight","media","height","SimpleCard","props","classes","Card","className","CardContent","Typography","cardName","CardMedia","image","cardImg","cardUsername","cardEmail","cardPhone","Tree","state","users","cardText","cardOpen","handleSelect","bind","axios","get","usersResponse","this","setState","data","event","nodeId","user","photo","url","setTimeout","renderedUsers","map","TreeItem","key","id","toString","label","uuidv4","name","email","address","street","suite","city","zipcode","phone","website","company","catchPhrase","bs","TreeView","tree","onNodeSelect","defaultCollapseIcon","defaultExpandIcon","Component","withStyles","display","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8762b8ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tminWidth: 400\r\n\t},\r\n\ttitle: {\r\n\t\ttextAlign: 'center',\r\n\t\tfontSize: 14\r\n\t},\r\n\tusername: {\r\n\t\tfontWeight: 600\r\n\t},\r\n\tmedia: {\r\n\t\theight: 140\r\n\t}\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Card className={classes.root}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className={classes.title}>\r\n\t\t\t\t\t<span>You've chosen user </span>\r\n\t\t\t\t\t<span className={classes.username}>{props.cardName}</span>\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t\t<CardMedia className={classes.media} image={props.cardImg} />\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography>{props.cardUsername}</Typography>\r\n\t\t\t\t<Typography>{props.cardEmail}</Typography>\r\n\t\t\t\t<Typography>{props.cardPhone}</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n","import React, { Component } from 'react';\r\nimport Card from './Card';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst styles = {\r\n\troot: {\r\n\t\tdisplay: 'flex'\r\n\t},\r\n\ttree: {\r\n\t\twidth: '500px'\r\n\t}\r\n};\r\n\r\nclass Tree extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { users: '', cardText: '', cardImg: '', cardOpen: false };\r\n\t\tthis.handleSelect = this.handleSelect.bind(this);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst usersResponse = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\t\tthis.setState({ users: usersResponse.data });\r\n\t}\r\n\tasync handleSelect(event, nodeId) {\r\n\t\tif (nodeId <= 10) {\r\n\t\t\tconst user = await axios.get(`https://jsonplaceholder.typicode.com/users/${nodeId}`);\r\n\t\t\tconst photo = await axios.get(`https://jsonplaceholder.typicode.com/photos/${nodeId}`);\r\n\t\t\tthis.setState({ cardText: user.data, cardImg: photo.data.url, cardOpen: true });\r\n\t\t\tsetTimeout(() => this.setState({ cardOpen: false }), 5000);\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tconst { users, cardOpen, cardText, cardImg } = this.state;\r\n\t\tconst { classes } = this.props;\r\n\t\tconst renderedUsers =\r\n\t\t\tusers !== '' &&\r\n\t\t\tusers.map((user) => (\r\n\t\t\t\t<TreeItem key={user.id} nodeId={user.id.toString()} label={`User ${user.id}`}>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Name\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.name} />\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Username\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.username} />\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Email\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.email} />\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Address\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Street\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.address.street} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Suite\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.address.suite} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"City\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.address.city} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Zipcode\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.address.zipcode} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Phone\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.phone} />\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Website\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.website} />\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Company\">\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Name\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.company.name} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Catch-Prase\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.company.catchPhrase} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label=\"Business\">\r\n\t\t\t\t\t\t\t<TreeItem nodeId={uuidv4()} label={user.company.bs} />\r\n\t\t\t\t\t\t</TreeItem>\r\n\t\t\t\t\t</TreeItem>\r\n\t\t\t\t</TreeItem>\r\n\t\t\t));\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<TreeView\r\n\t\t\t\t\tclassName={classes.tree}\r\n\t\t\t\t\tonNodeSelect={this.handleSelect}\r\n\t\t\t\t\tdefaultCollapseIcon={<ExpandMoreIcon />}\r\n\t\t\t\t\tdefaultExpandIcon={<ChevronRightIcon />}\r\n\t\t\t\t>\r\n\t\t\t\t\t{renderedUsers}\r\n\t\t\t\t</TreeView>\r\n\t\t\t\t{cardOpen && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tcardName={cardText.name}\r\n\t\t\t\t\t\t\tcardImg={cardImg}\r\n\t\t\t\t\t\t\tcardUsername={cardText.username}\r\n\t\t\t\t\t\t\tcardEmail={cardText.email}\r\n\t\t\t\t\t\t\tcardPhone={cardText.phone}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default withStyles(styles)(Tree);\r\n","import React from 'react';\nimport Tree from './Tree';\n\nfunction App() {\n\treturn <Tree />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}